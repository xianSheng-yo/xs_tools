{
  "compilerOptions": {
    /* 访问https://aka.ms/tsconfig阅读关于该文件的更多信息 */

    /* Projects */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。 */
    // "composite": true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定.tsbuildinfo增量编译文件路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 在引用复合项目时禁用首选源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时从多项目引用检查中选择一个项目。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */

    /* 语言与环境 */
    "target": "es2016" /* 为发出的 JavaScript 设置 JavaScript 语言版本并包含兼容的库声明。 */,
    //"lib": [],                                         /* 指定一组描述目标运行时环境的捆绑库声明文件。 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对遗留实验装饰器的实验支持。 */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的修饰声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定在以 React JSX emit 为目标时使用的 JSX 工厂函数，例如'React.createElement' 或 'h'。 */
    //"jsxFragmentFactory": "",                          /* 指定在定位 React JSX emit 时用于片段的 JSX 片段引用，例如'React.Fragment' 或 'Fragment'。 */
    //"jsxImportSource": "",                             /* 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符。 */
    //"reactNamespace": "",                              /* 指定为'createElement'调用的对象。这仅适用于针对“反应”JSX 发出的情况。 */
    //"noLib": true,                                     /* 禁止包含任何库文件，包括默认的 lib.d.ts。 */
    //"useDefineForClassFields": true,                   /* 发出符合 ECMAScript 标准的类字段。 */
    //"moduleDetection": "auto",                         /* 控制使用什么方法来检测模块格式的 JS 文件。 */

    /* Modules */
    "module": "ESNext" /*指定生成的模块代码。*/,
    //"rootDir": "./",                                   /* 指定源文件中的根文件夹。 */
    "moduleResolution": "node" /* 指定 TypeScript 如何从给定的模块说明符查找文件。 */,
    "baseUrl": "./" /* 指定基目录以解析非相对模块名称。 */,
    "paths": {
      "@/": ["src/*"]
    } /* 指定一组将导入重新映射到其他查找位置的条目。 */,
    //"rootDirs": [],                                    /* 解析模块时允许将多个文件夹视为一个文件夹。 */
    "typeRoots": [
      "./types",
      "./node_modules/@types"
    ] /* 指定多个文件夹，就像'./node_modules/@types'。 */,
    //"types": [],                                       /* 指定要包含的类型包名称，但不在源文件中引用。 */
    //"allowUmdGlobalAccess": true,                      /* 允许从模块访问 UMD 全局变量。 */
    //"moduleSuffixes": [],                              /* 解析模块时要搜索的文件名后缀列表。 */
    //"allowImportingTsExtensions": true,                /* 允许导入包含 TypeScript 文件扩展名。需要设置“--moduleResolution bundler”和“--noEmit”或“--emitDeclarationOnly”。 */
    //"resolvePackageJsonExports": true,                 /* 在解析包导入时使用 package.json 的 'exports' 字段。 */
    //"resolvePackageJsonImports": true,                 /* 在解析导入时使用 package.json 'imports' 字段。 */
    //"customConditions": [],                            /* 在解析导入时除了特定于解析器的默认值之外要设置的条件。 */
    "resolveJsonModule": true /* 启用导入 .json 文件。 */,
    // "allowArbitraryExtensions": true,                 /* 启用导入具有任何扩展名的文件，前提是存在声明文件。 */
    //"noResolve": true,                                 /* 禁止 'import's、'require's 或 '<reference>'s 扩展 TypeScript 应该添加到项目中的文件数量。 */

    /*JavaScript 支持*/
    //"allowJs": true,                                   /* 允许 JavaScript 文件成为程序的一部分。使用“checkJS”选项从这些文件中获取错误。 */
    //"checkJs": true,                                   /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    //"maxNodeModuleJsDepth": 1,                         /* 指定用于从“node_modules”检查 JavaScript 文件的最大文件夹深度。仅适用于“allowJs”。 */

    "plugins": [
      {
        "transform": "typescript-transform-paths",
        "afterDeclarations": true
      }
    ],

    /* Emit */
    "declaration": true /* 从项目中的 TypeScript 和 JavaScript 每个文件生成 .d.ts 文件。 */,
    //"declarationMap": true,                            /* 为 d.ts 文件创建源映射。 */
    //"emitDeclarationOnly": true,                       /* 只输出 d.ts 文件而不是 JavaScript 文件。 */
    //"sourceMap": true,                                 /* 为发出的 JavaScript 文件创建源映射文件。 */
    // "inlineSourceMap": true,                          /* 在发出的JavaScript中包含源码表文件。 */
    //"outFile": "./",                                   /* 指定一个将所有输出捆绑到一个 JavaScript 文件中的文件。如果 'declaration' 为真，则还指定一个捆绑所有 .d.ts 输出的文件。 */
    "outDir": "dist" /* 为所有发出的文件指定一个输出文件夹。 */,
    //"removeComments": true,                            /* 禁止发表评论。 */
    //"noEmit": true,                                    /* 禁止从编译中发出文件。 */
    // "importHelpers": true,                            /* 允许每个项目从tslib导入一次辅助函数，而不是每个文件都包括它们。 */
    //"importsNotUsedAsValues": "remove",                /* 为仅用于类型的导入指定发出/检查行为。 */
    //"downlevelIteration": true,                        /* 为迭代发出更合规但冗长且性能较低的 JavaScript。 */
    //"sourceRoot": "",                                  /* 指定调试器查找参考源代码的根路径。 */
    //"mapRoot": "",                                     /* 指定调试器应该定位映射文件而不是生成位置的位置。 */
    //"inlineSources": true,                             /* 在发出的 JavaScript 中的 sourcemaps 中包含源代码。 */
    //"emitBOM": true,                                   /* 在输出文件的开头发出一个 UTF-8 字节顺序标记 (BOM)。 */
    //"newLine": "crlf",                                 /* 设置发射文件的换行符。 */
    //"stripInternal": true,                             /* 禁用在 JSDoc 注释中包含 '@internal' 的声明。 */
    // "noEmitHelpers": true,                            /* 用在编译输出中生成像'__extends'这样的自定义辅助函数。 */
    //"noEmitOnError": true,                             /* 如果报告了任何类型检查错误，则禁用发射文件。 */
    //"preserveConstEnums": true,                        /* 禁止擦除生成代码中的“常量枚举”声明。 */
    //"declarationDir": "./",                            /* 指定生成的声明文件的输出目录。 */
    //"preserveValueImports": true,                      /* 在 JavaScript 输出中保留未使用的导入值，否则将被删除。 */

    /*互操作约束*/
    //"isolatedModules": true,                           /* 确保每个文件都可以安全地转译而不依赖于其他导入。 */
    //"verbatimModuleSyntax": true,                      /* 不要转换或省略任何未标记为仅类型的导入或导出，确保它们以基于“模块”设置的输出文件格式编写。 */
    //"allowSyntheticDefaultImports": true,              /* 当模块没有默认导出时允许“从 y 导入 x”。 */
    "esModuleInterop": true /* 发出额外的 JavaScript 以简化对导入 CommonJS 模块的支持。这会启用“allowSyntheticDefaultImports”以实现类型兼容性。*/,
    //"preserveSymlinks": true,                          /* 禁用解析符号链接到它们的真实路径。这与节点中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true /* 确保外壳在进口中是正确的。*/,

    /* Type Checking */
    "strict": true /* 启用所有严格的类型检查选项。*/,
    //"noImplicitAny": true,                             /* 为具有隐含 'any' 类型的表达式和声明启用错误报告。 */
    //"strictNullChecks": true,                          /* 类型检查时，考虑 'null' 和 'undefined'。 */
    //"strictFunctionTypes": true,                       /* 分配函数时，检查以确保参数和返回值是子类型兼容的。 */
    //"strictBindCallApply": true,                       /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。 */
    //"strictPropertyInitialization": true,              /* 检查已声明但未在构造函数中设置的类属性。 */
    //"noImplicitThis": true,                            /* 当 'this' 的类型为 'any' 时启用错误报告。 */
    "useUnknownInCatchVariables": true /* 默认的 catch 子句变量为 'unknown' 而不是 'any'。 */,
    //"alwaysStrict": true,                              /* 确保始终发出“use strict”。 */
    "noUnusedLocals": true /* 在未读取局部变量时启用错误报告。 */,
    //"noUnusedParameters": true,                        /* 未读取函数参数时引发错误。 */
    //"exactOptionalPropertyTypes": true,                /* 解释可选的属性类型，而不是添加'undefined'。 */
    //"noImplicitReturns": true,                         /* 为函数中未明确返回的代码路径启用错误报告。 */
    //"noFallthroughCasesInSwitch": true,                /* 为 switch 语句中的 fallthrough cases 启用错误报告。 */
    //"noUncheckedIndexedAccess": true,                  /* 在使用索引访问时将 'undefined' 添加到类型。 */
    //"noImplicitOverride": true,                        /* 确保派生类中的重写成员标有重写修饰符。 */
    //"noPropertyAccessFromIndexSignature": true,        /* 对使用索引类型声明的键强制使用索引访问器。 */
    //"allowUnusedLabels": true,                         /* 禁用未使用标签的错误报告。 */
    //"allowUnreachableCode": true,                      /* 禁用无法访问代码的错误报告。 */

    /* Completeness */
    //"skipDefaultLibCheck": true,                       /* 跳过类型检查包含在 TypeScript 中的 .d.ts 文件。 */
    "skipLibCheck": true /* 跳过类型检查所有 .d.ts 文件。*/
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/__tests__", "**/*.test.ts"]
}
